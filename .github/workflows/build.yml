name: Build and Push to ECR

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ap-northeast-1
  ECR_APP_REPOSITORY: go_echo_sample_app/app
  ECR_NGINX_REPOSITORY: go_echo_sample_app/nginx
  ECS_CLUSTER: go-echo-sample-dev-cluster
  ECS_SERVICE: go-echo-sample-dev-service
  ECS_TASK_DEFINITION: task-definition.json
  CODEDEPLOY_APP: go-echo-sample-dev-app
  CODEDEPLOY_GROUP: go-echo-sample-dev-dg

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push App image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -f app/Dockerfile -t $ECR_REGISTRY/$ECR_APP_REPOSITORY:$IMAGE_TAG app
          docker tag $ECR_REGISTRY/$ECR_APP_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_APP_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_APP_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_APP_REPOSITORY:latest

      - name: Build and push Nginx image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -f nginx/Dockerfile -t $ECR_REGISTRY/$ECR_NGINX_REPOSITORY:$IMAGE_TAG nginx
          docker tag $ECR_REGISTRY/$ECR_NGINX_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_NGINX_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_NGINX_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_NGINX_REPOSITORY:latest

      - name: Update task definition
        id: task-def
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          EXECUTION_ROLE_ARN: ${{ secrets.ECS_EXECUTION_ROLE_ARN }}
        run: |
          # タスク定義のイメージURIとロールARNを置換
          sed -e "s|APP_IMAGE|$ECR_REGISTRY/$ECR_APP_REPOSITORY:$IMAGE_TAG|g" \
              -e "s|NGINX_IMAGE|$ECR_REGISTRY/$ECR_NGINX_REPOSITORY:$IMAGE_TAG|g" \
              -e "s|EXECUTION_ROLE_ARN|$EXECUTION_ROLE_ARN|g" \
              ${{ env.ECS_TASK_DEFINITION }} > task-definition-updated.json

          echo "task-definition-file=task-definition-updated.json" >> $GITHUB_OUTPUT

      - name: Register task definition
        id: register-task-def
        run: |
          TASK_DEFINITION_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://${{ steps.task-def.outputs.task-definition-file }} \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
          echo "task-definition-arn=$TASK_DEFINITION_ARN" >> $GITHUB_OUTPUT

      - name: Update appspec.yaml
        run: |
          # appspec.yaml にタスク定義 ARN を注入
          sed -e "s|<TASK_DEFINITION>|${{ steps.register-task-def.outputs.task-definition-arn }}|g" \
              appspec.yaml > appspec-updated.yaml

      - name: Deploy to Amazon ECS via CodeDeploy
        id: deploy
        run: |
          # appspec.yaml の内容を jq でエスケープして JSON を生成
          APPSPEC_CONTENT=$(cat appspec-updated.yaml | jq -Rs .)

          # JSON ペイロードを作成
          cat > deployment.json <<EOF
          {
            "applicationName": "${{ env.CODEDEPLOY_APP }}",
            "deploymentGroupName": "${{ env.CODEDEPLOY_GROUP }}",
            "revision": {
              "revisionType": "AppSpecContent",
              "appSpecContent": {
                "content": $APPSPEC_CONTENT
              }
            }
          }
          EOF

          DEPLOYMENT_ID=$(aws deploy create-deployment --cli-input-json file://deployment.json \
            --query 'deploymentId' \
            --output text)
          echo "deployment-id=$DEPLOYMENT_ID" >> $GITHUB_OUTPUT
          echo "CodeDeploy Deployment ID: $DEPLOYMENT_ID"

      - name: Wait for deployment to complete
        run: |
          aws deploy wait deployment-successful \
            --deployment-id ${{ steps.deploy.outputs.deployment-id }}
          echo "Deployment completed successfully!"
